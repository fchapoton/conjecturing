{"name":"Conjecturing","tagline":"","body":"# Conjecturing for Sage\r\n\r\nThis repository contains the code described in the paper Automated Conjecture-making: Fajtlowicz's Dalmatian Heuristic Revisited.\r\n\r\n## Quickstart\r\n\r\nSee the directory `spkg` for instructions on how to build and install a Sage package containing the expressions program.\r\nOnce you have built and installed such a Sage package, you can use the Python files in the directory `sage` to interact\r\nwith the package.\r\n\r\nOpen the directory `sage` in a terminal window and start Sage. Usually this is done using the following command:\r\n\r\n```\r\n$ sage\r\n```\r\n\r\nOnce Sage has started, you can load the file `conjecturing.py`:\r\n\r\n```\r\nsage: attach('conjecturing.py')\r\n```\r\n\r\nYou can also choose to load any of the other files, but this is not necessary.\r\n\r\nAn example run might look like this:\r\n\r\n```\r\nsage: attach('conjecturing.py')\r\nsage: attach('numbertheory.py')\r\nsage: objects = [5, 10]\r\nsage: conjecture(objects, invariants, 1)\r\n```\r\n\r\nNote that loading the file `numbertheory.py` sets the variable `invariants` to a list of invariants used in number theory.\r\n\r\n## Layout of the repository\r\n\r\nThe repository contains four directory:\r\n* `c`: this directory contains the code for the program expressions which is used to generate the expressions and conjectures. This program can also be used as a stand-alone program.\r\n* `spkg`: this directory contains the script needed to construct a Sage package of the C program, so that the program can easily be installed.\r\n* `sage`: this directory contains the Python scripts which integrate the C program into Sage.\r\n* `examples`: this directory contains several examples of how the code in this repository can be used.\r\n\r\n## Usage\r\n\r\n### C program \r\n\r\nBuilding the C program is simple: just execute the command `make` in the directory `c`. This will build the program `expressions`. A detailed usage message for `expressions` can be obtained by executing the following command:\r\n\r\n```\r\n$ ./expressions -h\r\n```\r\n\r\nIn the Sage code this program is used to generate the conjectures, but it can also be used to generate the intermediate structures.\r\n\r\nTo generate rooted binary trees with a 0 binary nodes (i.e., with two children) and with 1 unary node (i.e., with one child), you can use the following command:\r\n\r\n```\r\n$ ./expressions -u 1 0\r\nFound 1 unlabeled trees.\r\n```\r\n\r\nTo generate labeled rooted binary trees, you also have to specify the number of invariants (i.e., labels for the leaves):\r\n\r\n```\r\n$ ./expressions -l 1 0 2\r\nFound 1 unlabeled trees.\r\nFound 10 labeled trees.\r\n```\r\n\r\nTo generate valid expressions, you need to input the values of invariants for all objects. Assume that the content of the file `values.txt` is this:\r\n\r\n```\r\n3 4 2\r\n3\r\n3\r\n2\r\n2\r\n5\r\n5\r\n2\r\n2\r\n5\r\n10\r\n4\r\n4\r\n```\r\n\r\nThe first line tells us that there are 3 objects, 4 invariants and that the second invariant is the main invariant. This corresponds to the following situation:\r\n\r\n```\r\n           Invariant  1  Invariant  2  Invariant  3  Invariant  4\r\n object 1)    3.000000      3.000000      2.000000      2.000000\r\n object 2)    5.000000      5.000000      2.000000      2.000000\r\n object 3)    5.000000     10.000000      4.000000      4.000000\r\n```\r\n\r\nNow you can generate all valid expressions with one unary operator as follows:\r\n\r\n```\r\n$ ./expressions -e 1 0 --all-operators --print-valid-expressions < values.txt \r\nI2 <= (I1) * 2\r\nI2 <= (I1) ^ 2\r\nFound 1 unlabeled trees.\r\nFound 30 labeled trees.\r\nFound 2 valid expressions.\r\n```\r\n\r\nFinally you can also generate conjectures using the same file:\r\n\r\n```\r\n$ ./expressions -c --all-operators --dalmatian < values.txt \r\nGeneration process was stopped by the conjecturing heuristic.\r\nFound 5 unlabeled trees.\r\nFound 410 labeled trees.\r\nFound 53 valid expressions.\r\nI2 <= (I1) * 2\r\nI2 <= ((I1) / 2) * (I3)\r\nI2 <= ((I3) ^ 2) + 1\r\n```\r\n\r\n## Examples\r\n\r\n## Tips\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}